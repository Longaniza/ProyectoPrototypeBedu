{"version":3,"sources":["components/Card.js","data/data.js","components/Form.js","components/Board.js","components/MyContext.js","components/MyProvider.js","components/StopWatch.js","pages/MemoPage.js","components/TopScore.js","pages/ScoresPage.js","pages/StartPage.js","routers/StartRoutes.js","routers/AppRouter.js","components/App.js","index.js"],"names":["Card","imageUrl","id","cardFound","clickCard","availableToPick","imageLoaded","className","style","backgroundColor","onClick","src","alt","onLoad","difficulties","name","size","cardsPerRowColumn","icon","fontSize","message","imgUrl","urls","responsiveRows","12","xs","sm","24","48","md","Alert","props","elevation","variant","Form","totalSeconds","cardsFlipped","history","useHistory","React","useState","open","setOpen","status","setStatus","text","setText","errorNameInput","setErrorNameInput","handleAlert","severity","saveTime","a","seconds","trim","data","playerName","totalCards","fetch","method","headers","body","JSON","stringify","response","ok","json","Error","timeToSee","setTimeout","clearTimeout","replace","textAlign","TextField","error","helperText","onChange","e","target","value","label","Button","color","startIcon","preventDefault","Snackbar","autoHideDuration","onClose","event","reason","Board","context","loading","setLoading","cards","setCards","cardsClicked","setCardsClicked","selectedCard","setSelectedCard","counter","useRef","current","useEffect","cardsPrev","Array","from","length","selectedurls","i","push","forEach","url","index","pair","randomNumber","Math","floor","random","pairNumber","timeout","state","map","element","Object","keys","pairAdded","addPair","marginTop","width","height","border","display","justifyContent","alignItems","CircularProgress","Grid","container","cardProps","item","MyContext","createContext","MyProvider","Provider","correctPairs","this","children","Stoptwatch","setTotalSeconds","setSeconds","cuentaRegresiva","showCuentaRegresiva","setShowCuentaRegresiva","interval","clearInterval","MemoPage","location","Consumer","regularColumns","field","headerName","flex","sortable","smallColumns","TopScore","matches","useMediaQuery","highScores","setHighScores","changedCard","setChangedCard","promiseError","setPromiseError","cardsPromises","cardsPromisesResults","getTimes","disableColumnMenu","disableSelectionOnClick","rows","columns","pageSize","boxShadow","padding","ScoresPage","setValue","Paper","square","Tabs","newValue","textColor","indicatorColor","aria-label","Tab","StartPage","selected","setSelected","elem","IconButton","to","StartRoutes","exact","path","component","AppRouter","action","theme","createMuiTheme","palette","primary","main","App","ThemeProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8f608d9.chunk.js","sourcesContent":["import React from 'react'\nimport \"../styles/card.css\";\nimport PropTypes from \"prop-types\";\n//Componente que representa cada una de las cartas\nconst Card = ({ imageUrl, id, cardFound, clickCard, availableToPick, imageLoaded }) => {\n    return (\n        <div className=\"scene\">\n            <div style={{ backgroundColor: \"transparent\" }} onClick={() => { clickCard(id) }} className={`card ${cardFound ? '' : 'is-flipped'} ${availableToPick ? '' : 'notavailabletopick'} change-cursor`}>\n                <div className=\"card__face card__face--front animate__animated animate__fadeInLeft\">\n                    <img src={imageUrl} alt=\"Card\" onLoad={imageLoaded} />\n                </div>\n                <div className=\"card__face card__face--back\"></div>\n            </div>\n        </div>\n    );\n}\n\nCard.propTypes = {\n    imageUrl: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    cardFound: PropTypes.bool.isRequired,\n    clickCard: PropTypes.func.isRequired,\n    availableToPick: PropTypes.bool.isRequired\n}\n\nexport default Card;\n","import React from 'react';\nimport ViewColumnIcon from '@material-ui/icons/ViewColumn';\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\nimport ViewComfyIcon from '@material-ui/icons/ViewComfy';\n//Arreglo de dificultades que es renderizado en el menu principal\nexport const difficulties = [\n    {\n        name: 'Pan comido',\n        size: '12 cartas',\n        cardsPerRowColumn: 12,\n        icon: <ViewColumnIcon style={{ fontSize: 100 }} />,\n        message: 'Esta dificultad es lo mas facil que existe, es como quitarle un dulce a un bebe',\n        imgUrl: 'https://drive.google.com/uc?export=view&id=17aaJAum032uYMORSRJWdGgRky7mHHYnD'\n    },\n    {\n        name: 'Normalito',\n        size: '24 cartas',\n        cardsPerRowColumn: 24,\n        icon: <ViewModuleIcon style={{ fontSize: 100 }} />,\n        message: 'Esta un poco mas dificil, pero aun es super pasable',\n        imgUrl: 'https://drive.google.com/uc?export=view&id=1ld2k1xej59Fr1bNN0A0Xt6IxYRapLeR1'\n    },\n    {\n        name: 'Superhipermega dificil',\n        size: '48 cartas',\n        cardsPerRowColumn: 48,\n        icon: <ViewComfyIcon style={{ fontSize: 100 }} />,\n        message: 'Esto ya es demasiado, quedaras traumado de tanta dificultad. God mode.',\n        imgUrl: 'https://drive.google.com/uc?export=view&id=13pUnQI5Y1WPz4v9Ue7v3eUf8iyjkoQkZ'\n    }\n];\n\n//Arreglo con los urls de las imagenes colocadas en la cartas del memorama\nexport const urls = [\"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=70,format=webp/images/cards/source/leblanc.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=70,format=webp/images/cards/source/leveled-katarina.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=70,format=webp/images/cards/source/leveled-aphelios.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=70,format=webp/images/cards/source/karma.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=70,format=webp/images/cards/source/leveled-zed.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=70,format=webp/images/cards/source/leona.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=70,format=webp/images/cards/source/diana.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=70,format=webp/images/cards/source/lucian.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/leveled-kindred.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/azir.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/leveled-lux.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/lee-sin.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/leveled-fiora.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/garen.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/darius.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/ashe.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/leveled-jinx.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/leveled-riven.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/leveled-shen.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/leveled-vi.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/leveled-miss-fortune.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/gangplank.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/leveled-braum.png\",\n    \"https://www.runeterrafire.com/cdn-cgi/image/sharpen=1.0,width=90,quality=85,format=webp/images/cards/source/nimble-poro.png\"\n]\n//Objeto utilizado para hacer renderado en base a columnas en el memorama(se utiliza como props con ayuda de\n// de material UI .Esta cantidad depende de la cantidad de cartas necesarias y el tamanio del display\nexport const responsiveRows = {\n    12: { xs: 6, sm: 3 },\n    24: { xs: 6, sm: 2 },\n    48: { xs: 6, sm: 4, md: 1 }\n}","import React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Button from '@material-ui/core/Button';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport TextField from '@material-ui/core/TextField';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n//Componente que representa la forma que aprece al ganar el juego\nconst Form = ({ totalSeconds, cardsPerRowColumn, cardsFlipped }) => {\n    const history = useHistory();\n    const [open, setOpen] = React.useState(false);\n    const [status, setStatus] = React.useState({ status: \"success\", message: \"El tiempo fue registrado con exito\" });\n    const [text, setText] = useState('');\n    const [errorNameInput, setErrorNameInput] = useState(false);\n\n    const handleAlert = (severity) => {\n        severity === \"succes\" || setStatus({ status: \"error\", message: \"El tiempo no pudo ser registrado\" });\n        setOpen(true);\n    };\n    const handleClose = (event, reason) => {\n        setOpen(false);\n    };\n\n    //Funcion utilizada para guardar el tiempo obtenido en la base de datos\n    const saveTime = async ({ name, seconds }) => {\n        if (name.trim() === '') {\n            setErrorNameInput(true);\n        }\n        else {\n            try {\n                const data = {\n                    playerName: name,\n                    totalCards: cardsPerRowColumn,\n                    seconds,\n                    cardsFlipped\n                }\n                const response = await fetch('/v1/scores', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(data)\n                });\n                if (response.ok && await response.json()) {\n                    handleAlert(\"succes\");\n                }\n                else {\n                    throw new Error('No se pudo realizar la peticion');\n                }\n            }\n            catch {\n                handleAlert(\"error\");\n            }\n            finally {\n                const timeToSee = setTimeout(() => {\n                    clearTimeout(timeToSee);\n                    history.replace(\"/memo\");\n                }, 500);\n            }\n        }\n    }\n    const comebackStart = (e) => {\n        e.preventDefault();\n        history.replace(\"/memo\");\n    }\n    const handleTextChange = (e) => {\n        if (e.target.value.trim() !== '') {\n            setErrorNameInput(false);\n        }\n        setText(e.target.value);\n    }\n    return (\n        <>\n            <div style={{ textAlign: \"center\" }} className={`${totalSeconds ? 'wingame animate__animated animate__backInDown' : 'normalgame'} modal modal-content container`}>\n                <h1 className=\"titulo\">Has encontrado todas las cartas!!!</h1>\n                <h1 className=\"titulo\">Terminaste en {totalSeconds}s</h1>\n                <h1 className=\"titulo\" >Quieres guardar tu tiempo en los mejores tiempos?</h1>\n                <div className=\"formComp\">\n                    <TextField id=\"standard-basic\" error={errorNameInput} helperText={errorNameInput ? \"El nombre es requerido\" : \"\"} onChange={handleTextChange} value={text} label={errorNameInput ? \"Error \" : \"Ingresa tu nombre\"} />\n                </div>\n                <div className=\"formComp\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"large\"\n                        onClick={() => { saveTime({ name: text, seconds: totalSeconds }) }}\n                        startIcon={<SaveIcon />}\n                    >\n                        Guardar tiempo y regresar al menu principal\n                </Button>\n                </div>\n                <div className=\"formComp\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"large\"\n                        onClick={comebackStart}\n                        startIcon={<ExitToAppIcon />}\n                    >\n                        Regresar al menu principal\n                </Button>\n                </div>\n            </div>\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n                <Alert severity={status.status}>\n                    {status.message}\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}\n\nForm.propTypes = {\n    totalSeconds: PropTypes.number.isRequired,\n    cardsPerRowColumn: PropTypes.number.isRequired\n}\nexport default Form;","import React, { useEffect, useState, useRef } from 'react'\nimport Card from '../components/Card';\nimport Grid from '@material-ui/core/Grid';\nimport { urls, responsiveRows } from '../data/data';\nimport Form from './Form';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n//Componente que representa el tablero\nconst Board = ({ cardsPerRowColumn, context, totalSeconds }) => {\n    const [loading, setLoading] = useState(true);\n    const [cards, setCards] = useState([]);\n    const [cardsClicked, setCardsClicked] = useState(0);\n    const [selectedCard, setSelectedCard] = useState({});\n    const counter = useRef(0);\n    const imageLoaded = () => {\n        counter.current += 1;\n        if (counter.current >= cardsPerRowColumn) {\n            setLoading(false);\n        }\n    }\n    useEffect(() => {\n        const cardsPrev = Array.from({ length: cardsPerRowColumn });\n        const selectedurls = [];\n        //Necesitamos seleccionar primero los urls necesarios dependiendo la cantidad de cartas\n        //dividimos entre dos porque necesitamos pares\n        for (let i = 0; i < (cardsPerRowColumn / 2); i++) {\n            selectedurls.push(urls[i]);\n        }\n        //Colocamos todas las cartas de forma aleatoria y lo insertamos con el uso de la funcion que devuelve \n        //useState\n        selectedurls.forEach((url, index) => {\n            let pair = 0;\n            while (pair < 2) {\n                const randomNumber = Math.floor(Math.random() * cardsPerRowColumn);\n                if (!cardsPrev[randomNumber]) {\n                    cardsPrev[randomNumber] = { id: randomNumber, imageUrl: url, cardFound: true, availableToPick: false, pairNumber: index };\n                    pair++;\n                }\n            }\n        });\n        setCards([...cardsPrev]);\n        //Dejamos que se vean las cartas durante 7 segundos y luevo las volteamos de nuevo\n        const timeout = setTimeout(() => {\n            setCards(state => state.map(element => ({ ...element, cardFound: false, availableToPick: true })));\n        }, 7000);\n        return () => {\n            clearTimeout(timeout);\n        }\n    }, [cardsPerRowColumn]);\n    //Funcion que determina que hacer en caso de que una carta sea clicada\n    const clickCard = (id) => {\n        //Cuando se le da click a una carta hay solo dos opciones, que sea la primera carta del par\n        //o que sea la segunda, se consideran ambos casos con ayuda de la variable selectedCard\n        if (!Object.keys(selectedCard).length) {\n            /*En este caso es la primer carta del par, por lo cual se voltea la carta selecionada con la ayuda\n            de la propiedad cardFound en la carta dentro del arreglo de cartas. Con ayuda de la propiedad\n            availableToPick hacemos que no se pueda clicar esta carta hasta que se selecciona la siguiente del par */\n            setCardsClicked(cardsClicked => cardsClicked + 1);\n            setSelectedCard(cards[id]);\n            setCards(cards.map(element => element.id === id ? { ...element, cardFound: true, availableToPick: false } : element));\n        }\n        else {\n            setCardsClicked(cardsClicked => cardsClicked + 1);\n            //En este caso es la segunda carta del par. Volteamos la carta y hacemos todas las cartas no clickeables\n            setCards(cards.map(element => element.id === id ? { ...element, cardFound: true, availableToPick: false } : { ...element, availableToPick: false }));\n            //Damos 0.8 segundos para que el usuario vea el par de cartas, antes de determinar si estas coinciden\n            setTimeout(() => {\n                //Variable utilizada para asegurase que solo se agregue una vez una unidad a la cantidad de pares encontrados\n                let pairAdded = false;\n                //Recorrido por el arreglo para saber que hacer en cada caso\n                setCards(state => state.map(element => {\n                    // Si la carta esta marcada como encontrada y no es miembro del par seleccionado solo\n                    //devolvemos su valor original\n                    if (element.cardFound && (element.id !== id && element.id !== selectedCard.id)) {\n                        return element;\n                    }\n                    //Si la carta es parte del par hacemos validaciones extras\n                    else if (element.id === id || element.id === selectedCard.id) {\n                        //Si ambas cartas coinciden en su valor de par agregamos entonces una unidad\n                        //al valor de correctPairs que se encuentra dentro del contexto\n                        if (selectedCard.pairNumber === cards[id].pairNumber) {\n                            //Nos aseguramos de hacerlo una sola vez\n                            if (!pairAdded) {\n                                context.addPair();\n                                pairAdded = true;\n                            }\n                            return { ...element, cardFound: true, availableToPick: false }\n                        }\n                        //Si no coinciden las volteamos y la hacemos clickeables de nuevo\n                        return { ...element, cardFound: false, availableToPick: true };\n                    }\n                    //Todas las demas cartas se hacen de nuevo clickeables\n                    else {\n                        return { ...element, availableToPick: true };\n                    }\n                }));\n                setSelectedCard({});\n            }, 800);\n        }\n    }\n    return (\n        <>\n            <div style={{ marginTop: \"65px\", width: \"90vw\", height: \"70vh\", border: \"1px black\", display: loading ? \"flex\" : \"none\", justifyContent: \"center\", alignItems: \"center\" }}>\n                <CircularProgress color=\"primary\" />\n            </div>\n            <div style={{ marginTop: \"65px\", display: loading ? \"none\" : \"block\" }} >\n                <Grid container>\n                    {\n                        cards.length ? (cards.map(({ id, imageUrl, cardFound, availableToPick }) => {\n                            const cardProps = {\n                                id,\n                                imageUrl,\n                                cardFound,\n                                availableToPick,\n                                cardsPerRowColumn,\n                                clickCard,\n                                imageLoaded\n                            }\n                            return <Grid key={id} item {...responsiveRows[cardsPerRowColumn]}> <Card key={id} {...cardProps} /></Grid>\n                        })) : []\n                    }\n                </Grid>\n                <Form cardsFlipped={cardsClicked} totalSeconds={totalSeconds} cardsPerRowColumn={cardsPerRowColumn} />\n            </div>\n        </>\n    )\n}\n\nBoard.propTypes = {\n    context: PropTypes.object.isRequired,\n    totalSeconds: PropTypes.number.isRequired,\n    cardsPerRowColumn: PropTypes.number.isRequired,\n}\nexport default Board;\n","import React from 'react';\n\nconst MyContext = React.createContext();\nexport default MyContext;","import React from 'react';\nimport MyContext from './MyContext';\n\nconst MyProvider = props => {\n  return (\n    <MyContext.Provider\n      value={{\n        correctPairs: 0,\n        addPair: function () { this.correctPairs++ }\n      }}\n    >\n      {props.children}\n    </MyContext.Provider>\n  );\n};\n\nexport default MyProvider;\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\n//Componente que representa el cronometro que aparece al jugar al memorama\nconst Stoptwatch = ({ cardsPerRowColumn, context, setTotalSeconds }) => {\n  const [seconds, setSeconds] = useState(7);\n  const cuentaRegresiva = useRef(true);\n  const [showCuentaRegresiva, setShowCuentaRegresiva] = useState(true);\n  useEffect(() => {\n    const interval = setTimeout(() => {\n      if (seconds === 0 && cuentaRegresiva.current) {\n        cuentaRegresiva.current = false;\n      }\n      if (seconds === 1 && cuentaRegresiva.current) {\n        setShowCuentaRegresiva(false);\n      }\n      if (cuentaRegresiva.current) {\n        setSeconds(seconds => seconds - 1);\n      }\n      else {\n        setSeconds(seconds => seconds + 1);\n      }\n    }, 1000);\n    if (context.correctPairs === (cardsPerRowColumn / 2)) {\n      clearTimeout(interval);\n      setTotalSeconds(seconds);\n    }\n    return () => clearInterval(interval);\n  }, [seconds, cardsPerRowColumn, context.correctPairs, setTotalSeconds]);\n\n  return (\n    <>\n      <h1 style={{ display: showCuentaRegresiva ? 'block' : 'none' }}>Memoriza todas las cartas que puedas!</h1>\n      <h1 style={{ display: showCuentaRegresiva ? 'none' : 'block' }}>Corre tiempo!</h1>\n      <h1>{seconds}</h1>\n    </>\n  )\n}\n\nStoptwatch.propTypes = {\n  cardsPerRowColumn: PropTypes.number.isRequired,\n  context: PropTypes.object.isRequired,\n  setTotalSeconds: PropTypes.func.isRequired\n}\n\nexport default Stoptwatch;","import React, { useState } from 'react'\nimport Board from '../components/Board';\nimport MyContext from '../components/MyContext';\nimport MyProvider from '../components/MyProvider';\nimport Stoptwatch from '../components/StopWatch';\n//Componente que representa la pagina del memorama\nconst MemoPage = ({ history }) => {\n    const { cardsPerRowColumn } = history.location.state;\n    const [totalSeconds, setTotalSeconds] = useState(0);\n\n    return (\n        <MyProvider>\n            <MyContext.Consumer>\n                {\n                    context => (\n                        <>\n                            {!totalSeconds ? <Stoptwatch cardsPerRowColumn={cardsPerRowColumn} context={context} setTotalSeconds={setTotalSeconds} /> : []}\n                            <Board cardsPerRowColumn={cardsPerRowColumn} context={context} totalSeconds={totalSeconds} />\n                        </>)\n                }\n            </MyContext.Consumer>\n        </MyProvider>\n    )\n}\n\nexport default MemoPage;\n","import React, { useEffect, useState } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport EmojiEventsIcon from '@material-ui/icons/EmojiEvents';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\nconst regularColumns = [\n  { field: 'playerName', headerName: 'Nombre', flex: 1, sortable: false },\n  { field: 'seconds', headerName: 'Segundos', width: 150 },\n  { field: 'cardsFlipped', headerName: 'Cartas Volteadas', width: 200 }];\nconst smallColumns = [{ field: 'playerName', headerName: 'Nombre', flex: 1, sortable: false }, { field: 'seconds', headerName: 'Segundos', flex: 1 }];\n\nfunction TopScore({ totalCards }) {\n  const matches = useMediaQuery('(max-width:650px)');\n  const [highScores, setHighScores] = useState([]);\n  const [changedCard, setChangedCard] = useState(true);\n  const [promiseError, setPromiseError] = useState(false);\n  useEffect(() => {\n    //Funcion utilizada para intentar obtener los tiempos de la base de datos\n    const getTimes = async () => {\n      setChangedCard(true);\n      try {\n        const cardsPromises = await fetch(`/v1/scores?order=seconds&cards=${totalCards}`);\n        if (cardsPromises.ok) {\n          const cardsPromisesResults = await cardsPromises.json();\n          setHighScores(cardsPromisesResults);\n        }\n        else {\n          throw new Error('No se pudo realizar la peticion');\n        }\n      }\n      catch {\n        setPromiseError(true);\n      }\n      finally {\n        setChangedCard(false);\n      }\n    }\n    getTimes();\n  }, [totalCards]);\n\n  return (\n    <div>\n      <div style={{ textAlign: \"center\" }}>\n        <EmojiEventsIcon style={{ fontSize: 60 }} />\n        <h1 className=\"scores\"><b>{totalCards} cartas</b></h1>\n        <div style={{ height: 370, width: '100%' }}>\n          {changedCard ? <CircularProgress color=\"primary\" /> : promiseError ? <Alert severity=\"error\">Hubo en error al relizar la peticion!</Alert> : highScores.length ? <DataGrid disableColumnMenu disableSelectionOnClick rows={highScores.map((element, index) => ({ ...element, id: index + 1 }))} columns={matches ? smallColumns : regularColumns} pageSize={5} /> : <div style={{ boxShadow: \"0px 1px 5px #666\", padding: \"50px 10px\" }}><TimerOffIcon style={{ fontSize: 70 }} /><h1>Sin tiempos registrados</h1></div>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TopScore;","import React, { useState } from 'react';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Paper from '@material-ui/core/Paper';\nimport ViewColumnIcon from '@material-ui/icons/ViewColumn';\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\nimport ViewComfyIcon from '@material-ui/icons/ViewComfy';\nimport TopScore from '../components/TopScore';\n\n\n//Componente que representa la pagina de puntajes ordenados de menor a mayor segun el tiempo \nconst ScoresPage = () => {\n    const [value, setValue] = useState(\"12\");\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <div>\n            <Paper square>\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    variant=\"fullWidth\"\n                    textColor=\"primary\"\n                    indicatorColor=\"primary\"\n                    aria-label=\"icon label tabs example\"\n                >\n                    <Tab value=\"12\" icon={<ViewColumnIcon />} label=\"12 CARTAS\" />\n                    <Tab value=\"24\" icon={<ViewModuleIcon />} label=\"24 CARTAS\" />\n                    <Tab value=\"48\" icon={<ViewComfyIcon />} label=\"48 CARTAS\" />\n                </Tabs>\n            </Paper>\n            <h1 className=\"titulo\"><strong>Mejores tiempos</strong></h1>\n            <br></br>\n            <div className=\"container\">\n                <TopScore totalCards={value} />\n            </div>\n        </div>\n    )\n}\n\nexport default ScoresPage;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { difficulties } from '../data/data';\nimport IconButton from '@material-ui/core/IconButton';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport HelpIcon from '@material-ui/icons/Help';\nimport TimerIcon from '@material-ui/icons/Timer';\n\n\n\nfunction StartPage({ history }) {\n    const [selected, setSelected] = useState(12);\n    return (<div className=\"difficulties\">\n        {\n            difficulties.map((elem, index) => {\n                return (<div key={index} className={`${selected === elem.cardsPerRowColumn ? 'selected' : ''} animate__animated animate__slideInLeft change-cursor difficulty`} onClick={(e) => { setSelected(elem.cardsPerRowColumn) }}>\n\n                    <div>\n                        {elem.icon}\n                    </div>\n                    <div>\n                        <h1>{elem.name}</h1>\n                        <h1 className=\"size\" >{elem.size}</h1>\n                        <div className=\"text-align-right tooltip\">\n                            <HelpIcon />\n                            <span className=\"tooltiptext\">{elem.message}</span>\n                        </div>\n                    </div>\n                </div>);\n            })\n        }\n        <div className=\"text-align-right\">\n            <IconButton aria-label=\"add to shopping cart\"\n                onClick={() => {\n                    history.replace(\"/memo/memorama\", { cardsPerRowColumn: selected });\n                }}\n            >\n                <PlayArrowIcon color=\"primary\" style={{ fontSize: 60 }} />\n            </IconButton>\n        </div>\n        <div id=\"scores-initial-menu\" className=\"tooltip\">\n            <Link\n                to=\"/memo/scores\"\n            >\n                <TimerIcon color=\"primary\" style={{ fontSize: 30 }}></TimerIcon>\n            </Link>\n\n            <div className=\"tooltiptext bottom\">\n                <span>Mejores tiempos</span>\n            </div>\n        </div>\n    </div>);\n}\n\nStartPage.propTypes = {\n    history: PropTypes.object.isRequired\n}\n\n\nexport default StartPage;","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport ScoresPage from '../pages/ScoresPage';\nimport StartPage from '../pages/StartPage';\n\n\nconst StartRoutes = () => {\n    /* Se hace la busqueda de las paginas disponibles. Si no coincide con ninguna se redireccion al menu\n    principal */\n    return (\n        <>\n            <div>\n                <Switch>\n                    <Route exact path=\"/memo\" component={StartPage} />\n                    <Route exact path=\"/memo/scores\" component={ScoresPage} />\n                    <Redirect to=\"/memo\" />\n                </Switch>\n            </div>\n        </>\n    )\n}\nexport default StartRoutes;","import {\n    BrowserRouter,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\nimport MemoPage from \"../pages/MemoPage\";\nimport StartRoutes from \"./StartRoutes\";\n\nexport default function AppRouter() {\n    /* Enrutador principal de la App. Responde a la ruta para renderear el memorama si este viene de un\n    replace lo cual se obtiene al darle click al boton del menu principal. Si este no es el caso se hace \n    un redirect al menu principal */\n    return (\n        <BrowserRouter>\n            <div>\n                <Switch>\n                    <Route exact path=\"/memo/memorama\" component={({ history }) => history.action !== 'REPLACE' ?\n                        <Redirect to='/memo' /> : <MemoPage {...{ history }} />} />\n                    <Route path=\"/\" component={StartRoutes} />\n                </Switch>\n            </div>\n        </BrowserRouter>\n\n    )\n}\n","import React from 'react'\nimport AppRouter from '../routers/AppRouter';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n//Providar del tema de nuestra app\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#000000\",\n        },\n    },\n});\n\nconst App = () => {\n    return (\n        //Enrutador de la App\n        <ThemeProvider theme={theme}>\n            <AppRouter />\n        </ThemeProvider>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}